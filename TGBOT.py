from flask import Flask
from threading import Thread
import os
import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# === Flask keep-alive server ===
app = Flask('')

@app.route('/')
def home():
    return "I'm alive!"

def run_flask():
    port = int(os.environ.get("PORT", 3000))
    print(f"[keep_alive] ‚Üí –∑–∞–ø—É—Å–∫–∞—é Flask –Ω–∞ 0.0.0.0:{port}")
    # –æ—Ç–∫–ª—é—á–∞–µ–º reloader, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –¥–≤–æ–π–Ω–æ–π —Å—Ç–∞—Ä—Ç
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def keep_alive():
    t = Thread(target=run_flask, daemon=True)
    t.start()


# === Telegram Bot configuration ===
TOKEN = "7823804408:AAEZNxL5z6vfKNTBtYPoR30q2XnjeGjtZR0"
MANAGER_USERNAME = "@ms_manager_by"
CHANNEL_USERNAME = "@maxssell"
CHANNEL_LINK = "https://t.me/maxssell"
REVIEWS_GROUP = "https://t.me/maxssell_feedback"

CALCULATION_SETTINGS = {
    "min_amount": 100,
    "max_amount": 2500,
    "ranges": [
        {"min": 100, "max": 300,  "multiplier": 0.7},
        {"min": 300, "max": 350, "multiplier": 0.67},
        {"min": 350, "max": 400,"multiplier": 0.65},
        {"min": 400, "max": 500,  "multiplier": 0.63},
        {"min": 500, "max": 550, "multiplier": 0.61},
        {"min": 550, "max": 600,"multiplier": 0.60},
        {"min": 600, "max": 650,  "multiplier": 0.59},
        {"min": 650, "max": 700, "multiplier": 0.585},
        {"min": 700, "max": 800,"multiplier": 0.575},
        {"min": 800, "max": 900,  "multiplier": 0.565},
        {"min": 900, "max": 2500,"multiplier": 0.55},
    ]
}

def create_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='calculate')],
        [InlineKeyboardButton("‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", url=REVIEWS_GROUP)],
        [InlineKeyboardButton("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", url=f"https://t.me/{MANAGER_USERNAME[1:]}")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def check_subscription(user_id: int, bot, chat_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in ("member", "creator", "administrator"):
            return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: {e}")

    await bot.send_message(
        chat_id=chat_id,
        text=(
            "üö® <b>–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:</b>\n"
            f"{CHANNEL_LINK}"
        ),
        parse_mode="HTML"
    )
    return False

async def send_calculation_request(chat_id, context):
    media_group = []
    for i, has_caption in [(1, True), (2, False), (3, False)]:
        img_path = f'img/{i}.jpg'
        if os.path.exists(img_path):
            with open(img_path, 'rb') as photo:
                caption = "üõç <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ ¬•(–Æ–∞–Ω—å), —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å.</b>\n\n" if has_caption else None
                media_group.append(InputMediaPhoto(media=photo, caption=caption, parse_mode="HTML"))
    if media_group:
        await context.bot.send_media_group(chat_id=chat_id, media=media_group)
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text="üõç <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ ¬•(–Æ–∞–Ω—å), —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å.</b>",
            parse_mode="HTML"
        )
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    welcome_text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        "üìå –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å:\n"
        "   <i>‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "   ‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</i>\n\n"
        f"‚úâÔ∏è <b>–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä:</b> {MANAGER_USERNAME}\n\n"
        "üåü <b>–ñ–ï–õ–ê–ï–ú –ü–†–ò–Ø–¢–ù–´–• –ü–û–ö–£–ü–û–ö!</b>"
    )
    try:
        with open('img/welcome.jpg', 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption=welcome_text, parse_mode="HTML", reply_markup=create_main_keyboard())
    except:
        await update.message.reply_text(welcome_text, parse_mode="HTML", reply_markup=create_main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if not await check_subscription(query.from_user.id, context.bot, query.message.chat_id):
        return
    if query.data == 'calculate':
        context.user_data['awaiting_amount'] = True
        await send_calculation_request(query.message.chat_id, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    chat_id = update.message.chat_id

    if not context.user_data.get('sub_checked'):
        if not await check_subscription(user_id, context.bot, chat_id):
            return
        context.user_data['sub_checked'] = True

    if not context.user_data.get('awaiting_amount'):
        return await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=create_main_keyboard())

    try:
        amount = float(update.message.text)
    except ValueError:
        return await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)", reply_markup=create_main_keyboard())

    settings = CALCULATION_SETTINGS
    if amount < settings['min_amount']:
        response = f"‚ùå –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {settings['min_amount']} ¬•\n\n"
    elif amount > settings['max_amount']:
        response = f"‚ö†Ô∏è –î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—ã—à–µ {settings['max_amount']} ¬•\n\nüë®‚Äçüíº –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {MANAGER_USERNAME}"
    else:
        m = next((r["multiplier"] for r in settings["ranges"] if r["min"] <= amount < r["max"]), None)
        if m:
            total = amount * m
            response = (
                f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <b>{total:.0f}.00 BYN</b>\n\n"
                "üöõ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –∫–æ–≥–¥–∞ –ø–∞—Ä–∞/–≤–µ—â—å –ø—Ä–∏–µ–¥–µ—Ç –∫ –Ω–∞–º –≤ –ì—Ä–æ–¥–Ω–æ, –∏–¥–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–µ—Å—É, 7$/–∫–≥.\n\n"
                f"üëâ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞, —Å—Å—ã–ª–∫—É –∏ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä: {MANAGER_USERNAME}"
            )
        else:
            response = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞\n\n‚úçÔ∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {MANAGER_USERNAME}"

    await update.message.reply_text(response, parse_mode="HTML", reply_markup=create_main_keyboard())
    context.user_data['awaiting_amount'] = False

def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º web-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
    keep_alive()

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É img, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not os.path.exists('img'):
        os.makedirs('img')
        logger.warning("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ 'img'.")

    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
