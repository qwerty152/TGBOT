const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs');
const path = require('path');

// === Configuration ===
const TOKEN = "TOKEN";
const MANAGER_USERNAME = "@ms_manager_by";
const CHANNEL_USERNAME = "@maxssell";
const CHANNEL_LINK = "https://t.me/maxssell";
const REVIEWS_GROUP = "https://t.me/maxssell_feedback";

const CALCULATION_SETTINGS = {
    "min_amount": 100,
    "max_amount": 2500,
    "ranges": [
        {"min": 100, "max": 300,  "multiplier": 0.7},
        {"min": 300, "max": 350, "multiplier": 0.67},
        {"min": 350, "max": 400,"multiplier": 0.65},
        {"min": 400, "max": 500,  "multiplier": 0.63},
        {"min": 500, "max": 550, "multiplier": 0.61},
        {"min": 550, "max": 600,"multiplier": 0.60},
        {"min": 600, "max": 650,  "multiplier": 0.59},
        {"min": 650, "max": 700, "multiplier": 0.585},
        {"min": 700, "max": 800,"multiplier": 0.575},
        {"min": 800, "max": 900,  "multiplier": 0.565},
        {"min": 900, "max": 2500,"multiplier": 0.55},
    ]
};

// === Keep-alive server ===
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
    res.send("I'm alive!");
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`[keep_alive] ‚Üí –∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –Ω–∞ 0.0.0.0:${PORT}`);
});

// === Bot initialization ===
const bot = new TelegramBot(TOKEN, {polling: true});

// Helper functions
function createMainKeyboard() {
    return {
        inline_keyboard: [
            [{text: "üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–∫–∞–∑", callback_data: 'calculate'}],
            [{text: "‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", url: REVIEWS_GROUP}],
            [{text: "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", url: `https://t.me/${MANAGER_USERNAME.substring(1)}`}]
        ]
    };
}

async function checkSubscription(userId, chatId) {
    try {
        const member = await bot.getChatMember(CHANNEL_USERNAME, userId);
        if (member.status === "member" || member.status === "creator" || member.status === "administrator") {
            return true;
        }
    } catch (e) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: ${e}`);
    }

    await bot.sendMessage(
        chatId,
        `üö® <b>–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:</b>\n${CHANNEL_LINK}`,
        {parse_mode: "HTML"}
    );
    return false;
}

async function sendCalculationRequest(chatId) {
    const imgDir = path.join(__dirname, 'img');
    const mediaGroup = [];
    
    try {
        for (let i = 1; i <= 3; i++) {
            const imgPath = path.join(imgDir, `${i}.jpg`);
            if (fs.existsSync(imgPath)) {
                const caption = i === 1 ? 
                    "üõç <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ ¬•(–Æ–∞–Ω—å), —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å.</b>\n\n" : 
                    undefined;
                
                mediaGroup.push({
                    type: 'photo',
                    media: fs.createReadStream(imgPath),
                    caption: caption,
                    parse_mode: i === 1 ? "HTML" : undefined
                });
            }
        }
        
        if (mediaGroup.length > 0) {
            await bot.sendMediaGroup(chatId, mediaGroup);
        } else {
            await bot.sendMessage(
                chatId,
                "üõç <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ ¬•(–Æ–∞–Ω—å), —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å.</b>",
                {parse_mode: "HTML"}
            );
        }
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: ${e}`);
        await bot.sendMessage(
            chatId,
            "üõç <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ ¬•(–Æ–∞–Ω—å), —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å.</b>",
            {parse_mode: "HTML"}
        );
    }
}

// Bot handlers
bot.onText(/\/start/, async (msg) => {
    const user = msg.from;
    const welcomeText = `
üëã <b>–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!</b>\n
üìå –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å:\n
   <i>‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
   ‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</i>\n
‚úâÔ∏è <b>–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä:</b> ${MANAGER_USERNAME}\n\n
üåü <b>–ñ–ï–õ–ê–ï–ú –ü–†–ò–Ø–¢–ù–´–• –ü–û–ö–£–ü–û–ö!</b>
    `;
    
    try {
        const imgPath = path.join(__dirname, 'img', 'welcome.jpg');
        if (fs.existsSync(imgPath)) {
            await bot.sendPhoto(msg.chat.id, fs.createReadStream(imgPath), {
                caption: welcomeText,
                parse_mode: "HTML",
                reply_markup: createMainKeyboard()
            });
        } else {
            await bot.sendMessage(msg.chat.id, welcomeText, {
                parse_mode: "HTML",
                reply_markup: createMainKeyboard()
            });
        }
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: ${e}`);
        await bot.sendMessage(msg.chat.id, welcomeText, {
            parse_mode: "HTML",
            reply_markup: createMainKeyboard()
        });
    }
});

bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;
    
    await bot.answerCallbackQuery(callbackQuery.id);
    
    if (callbackQuery.data === 'calculate') {
        if (!await checkSubscription(userId, chatId)) return;
        
        bot.once('message', handleAmountInput.bind(null, chatId, userId));
        await sendCalculationRequest(chatId);
    }
});

async function handleAmountInput(chatId, userId, msg) {
    if (msg.chat.id !== chatId) return;
    
    const amount = parseFloat(msg.text);
    if (isNaN(amount)) {
        await bot.sendMessage(
            chatId,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)",
            {reply_markup: createMainKeyboard()}
        );
        return;
    }
    
    const settings = CALCULATION_SETTINGS;
    let response;
    
    if (amount < settings.min_amount) {
        response = `‚ùå –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${settings.min_amount} ¬•\n\n`;
    } else if (amount > settings.max_amount) {
        response = `‚ö†Ô∏è –î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—ã—à–µ ${settings.max_amount} ¬•\n\nüë®‚Äçüíº –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: ${MANAGER_USERNAME}`;
    } else {
        const range = settings.ranges.find(r => r.min <= amount && amount < r.max);
        if (range) {
            const total = amount * range.multiplier;
            response = `
üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <b>${Math.round(total)}.00 BYN</b>\n\n
üöõ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –∫–æ–≥–¥–∞ –ø–∞—Ä–∞/–≤–µ—â—å –ø—Ä–∏–µ–¥–µ—Ç –∫ –Ω–∞–º –≤ –ì—Ä–æ–¥–Ω–æ, –∏–¥–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–µ—Å—É, 7$/–∫–≥.\n\n
üëâ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞, —Å—Å—ã–ª–∫—É –∏ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä: ${MANAGER_USERNAME}
            `;
        } else {
            response = `‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞\n\n‚úçÔ∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: ${MANAGER_USERNAME}`;
        }
    }
    
    await bot.sendMessage(
        chatId,
        response,
        {parse_mode: "HTML", reply_markup: createMainKeyboard()}
    );
}

// Create img directory if not exists
const imgDir = path.join(__dirname, 'img');
if (!fs.existsSync(imgDir)) {
    fs.mkdirSync(imgDir);
    console.log("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ 'img'.");
}

console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");